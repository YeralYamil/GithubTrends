//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GithubProjectsSample.json`.
    static let githubProjectsSampleJson = Rswift.FileResource(bundle: R.hostingBundle, name: "GithubProjectsSample", pathExtension: "json")
    
    /// `bundle.url(forResource: "GithubProjectsSample", withExtension: "json")`
    static func githubProjectsSampleJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.githubProjectsSampleJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `projectCell`.
    static let projectCell: Rswift.ReuseIdentifier<ProjectTableViewCell> = Rswift.ReuseIdentifier(identifier: "projectCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 3 localization keys.
    struct localizable {
      /// Value: Error parsing JSON
      static let errorParsingJSON = Rswift.StringResource(key: "Error parsing JSON", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No Internet connection, please try again later
      static let noInternetConnectionPleaseTryAgainLater = Rswift.StringResource(key: "No Internet connection, please try again later", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: There was a server error, please try again later
      static let thereWasAServerErrorPleaseTryAgainLater = Rswift.StringResource(key: "There was a server error, please try again later", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Error parsing JSON
      static func errorParsingJSON(_: Void = ()) -> String {
        return NSLocalizedString("Error parsing JSON", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No Internet connection, please try again later
      static func noInternetConnectionPleaseTryAgainLater(_: Void = ()) -> String {
        return NSLocalizedString("No Internet connection, please try again later", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: There was a server error, please try again later
      static func thereWasAServerErrorPleaseTryAgainLater(_: Void = ()) -> String {
        return NSLocalizedString("There was a server error, please try again later", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
